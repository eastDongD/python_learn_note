import numpy as np
a=np.array([[[1,13],
             [3,4],
             [5,6],
             [7,8]],
            [[2,3],
             [4,15],
             [5,6],
             [6,7]],
            [[1,2],
             [3,4],
             [25,6],
             [7,9]]])
#print(a)
#print(a.shape)  # (3, 4, 2) shape是对每个的最外层说的，第一个[]内有3个大的[]，3个打的[]内都有4个大的[]，4个大的[]内都有两个数字
#print(np.max(a,axis=0)) #去掉第一个维度， 现在剩下3个(4,2)维度的数据，结果也应为(4,2)维度的数据
    #  [[1,13],      [[2,3],              [[1,2],            结果为：  [[ 2 13]
    #    [3,4],       [4,15],              [3,4],                       [ 4 15]
    #    [5,6],       [5,6],               [25,6],                      [25  6]
    #    [7,8]]       [6,7]],              [7,9]]                       [ 7  9]]
#print(np.max(a,axis=1)) #去掉第二个维度， 现在剩下4个(3,2)维度的数据，结果也应为(3,2)维度的数据
    # 结果为(3,2)则将有四个数字的维度合并，即 上面注释每一列都是4个数字，选择一个最大的
    # 即原来（3，4，2）---》选最大的变为（3，1，2），然后内容不变，去掉一个[]变为（3，2）
    # [[ 7 13]  7---1，3，5，7   13------13，4，6，8
    #  [ 6 15]  6---2，4，5，6   15------3，15，6，7
    #  [25  9]] 25--1，3，25，7  9--------2，4，6，9
#print(np.max(a,axis=2)) #去掉第三个维度， 现在剩下2个(3,4)维度的数据，结果也应为(3,4)维度的数据
    # 首先将第三个维度的两个数据按照大小，合并为一个，变为（3，4，1），然后去掉中括号
    # [[[13],[4],[6],[8]],                 [[13,4,6,8],      
    #  [[3],[15],[6],[7]],     -------->    [3,15,6,7],
    #  [[2],[4],[25],[9]]]                  [2,4,25,9]]
b=np.array([[3,2,7],
            [4,8,6],
            [9,5,1],
            [1,3,5]])
#print(b)
#print(np.max(b,axis=0)) # axis=0代表去掉第一维度，结果应为 剩下维度[x,x,x]，x是取第二维度在第一个维度相同位置的最大值
                        # 第二维度在第一个维度相同位置是指每列，故axis=0代表对每列取最大值 [9 8 7]
#print(np.max(b,axis=1)) # axis=1代表去掉第2维度，结果应为 [x,x,x,x]，x是取第1维度在第2个维度相同位置的最大值
                        # 第1维度在第2个维度相同位置是指每行，故axis=0代表对每行取最大值 [7 8 9 5]
# 对于2维，可以记为0代表行，1代表列，axis=0代表去掉行，即只留一行，将各行合并时，相应位置取各个行的最大值
                                  # axis=1代去掉列，即只留一列，将各列合并时，相应位置取各个列的最大值 
# array为数组，不是矩阵，只有维度的概念没有行列的概念，所以行向量和列向量对array来讲一样，都是一维，都是一行[1,2,3]
# 故axis=1得到的是一维的，相当于行向量，不是列向量
# print(a)
# print(a.shape)   # (3, 4, 2)
# print(np.transpose(a))
# print(np.transpose(a).shape)  # (2, 4, 3)
# 对于列向量 d=[1,1,1] 其只有一维(3,) ，所以transpose对tuple变化后还是 (3,) ，
# 故 无法由行向量变为列向量证明了上述观点
d=np.array([1,1,1])
# print(d)                                # [1 1 1]
# print(d.shape)                          # (3,)
# print(np.transpose(d))                  # [1 1 1]
# print(np.transpose(d).shape)            # (3,)
# 行向量变列向量： 加维度后transpose
# 先看切片 :
# print(a[0,:])    # 第一个维度第一个 [[ 1 13] [ 3  4] [ 5  6] [ 7  8]]
# print(a[:,0,:])  # 第二个维度第一个 [[ 1 13] [ 2  3] [ 1  2]]
# print(a[:,0])    # 第二个维度第一个 [[ 1 13] [ 2  3] [ 1  2]]  即后面可以省略不写
# print(a[:,:,0])  # 第三个维度第一个 [[ 1  3  5  7] [ 2  4  5  6] [ 1  3 25  7]]
print(d[np.newaxis,:]) # 原来为（3，）  现在为 （1，3） 即    [[1 1 1]]
print(d[:,np.newaxis]) # 原来为（3，）  现在为 （3,1） 即  [[1] [1] [1]]

             
